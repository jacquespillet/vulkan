#version 460

layout (local_size_x = 16, local_size_y = 16) in;
#define PI 3.14159265359

// #extension GL_ARB_separate_shader_objects : enable
// #extension GL_ARB_shading_language_420pack : enable
#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable


layout (binding = 0) uniform sampler2D samplerPositionDepth;
layout (binding = 1) uniform sampler2D samplerNormal;
layout (binding = 2, r8) uniform  image2D shadowImage;
layout (binding = 3) uniform accelerationStructureEXT topLevelAS;
layout (set=0,binding = 4) uniform passUBO 
{
    uint FrameCounter;
} PassUBO;


#include "Common/SceneUBO.glsl"
layout (set=1,binding = 0) uniform UBO 
{
    sceneUbo Data;
} SceneUbo;

// layout (location = 0) in vec2 inUV;

// layout (location = 0) out float outFragColor;

#include "Common/random.glsl"

void main() 
{	  
	ivec2 dim = imageSize(shadowImage);
    vec2 uv = vec2(gl_GlobalInvocationID.xy) / dim;

	vec3 FragPosition = texture(samplerPositionDepth, uv).rgb;
	vec3 Normal = normalize(texture(samplerNormal, uv).rgb * 2.0 - 1.0);
	uint Shadow=0;

#if 0
	vec3 L = normalize(-SceneUbo.Data.LightDirection);
#else
        vec3 light_dir= normalize(-SceneUbo.Data.LightDirection);;
        vec3 light_tangent   = normalize(cross(light_dir, vec3(0.0f, 1.0f, 0.0f)));
        vec3 light_bitangent = normalize(cross(light_tangent, light_dir));

        // calculate disk point
        uint RandomState = uint(uint(gl_GlobalInvocationID.x) * uint(1973) + uint(gl_GlobalInvocationID.y) * uint(9277) + uint(PassUBO.FrameCounter) * uint(26699)) | uint(1); 
        float Random1 = RandomUnilateral(RandomState);
        float Random2 = RandomUnilateral(RandomState);

        float point_radius = 0.1 * Random1;
        float point_angle  = Random2 * 2.0f * PI;
        vec2  disk_point   = vec2(point_radius * cos(point_angle), point_radius * sin(point_angle));    
        vec3 L = normalize(light_dir + disk_point.x * light_tangent + disk_point.y * light_bitangent);
#endif
	rayQueryEXT rayQuery;
	rayQueryInitializeEXT(rayQuery, topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT, 0xFF, FragPosition, 0.01, L, 1000.0);
	// Start the ray traversal, rayQueryProceedEXT returns false if the traversal is complete
	while (rayQueryProceedEXT(rayQuery)) { }

	// If the intersection has hit a triangle, the fragment is shadowed
	if (rayQueryGetIntersectionTypeEXT(rayQuery, true) == gl_RayQueryCommittedIntersectionTriangleEXT ) {
		Shadow=1;
	}

    uint prevShadow = uint(imageLoad(shadowImage, ivec2(gl_GlobalInvocationID.xy)).r);
    if(PassUBO.FrameCounter==0)
    {
        prevShadow=0;   
    }
    Shadow |= prevShadow;
    imageStore(shadowImage, ivec2(gl_GlobalInvocationID.xy), vec4(Shadow));
}

