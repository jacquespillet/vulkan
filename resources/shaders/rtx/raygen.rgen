#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require

#include "Common/random.glsl"
#include "Common/raypayload.glsl"
#include "Common/ubo.glsl"

layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D outputImage;
layout(binding = 2, set = 0, rgba32f) uniform image2D accumulationImage;
layout(binding = 3, set = 0) uniform UniformData { Ubo ubo; };

layout(location = 0) rayPayloadEXT RayPayload rayPayload;

void main() 
{
	vec3 Color = vec3(0.0);
	
	for(uint i=0; i<ubo.samplesPerFrame; i++)
	{
		vec4 origin = ubo.viewInverse * vec4(0.0, 0.0, 0.0, 1.0);
		vec4 target = ubo.projInverse * vec4((vec2(gl_LaunchIDEXT.xy)) / gl_LaunchSizeEXT.xy * 2.0 - 1.0, 0.0, 1.0);
		vec4 direction = ubo.viewInverse * vec4(normalize(target.xyz), 0.0);
		
		vec3 sampleColor = vec3(1.0);
		
		traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT, 0xff, 0, 0, 0, origin.xyz, 0.001, direction.xyz, 10000.0, 0);		
		sampleColor *= rayPayload.color;
		
		Color += sampleColor;
	}

	vec3 LastFrameColor = vec3(0);
	if(ubo.samplesPerFrame != ubo.currentSamplesCount)
	{
		LastFrameColor = imageLoad(accumulationImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
	}

	vec3 AccumulatedColor = LastFrameColor + Color;
	imageStore(accumulationImage, ivec2(gl_LaunchIDEXT.xy), vec4(AccumulatedColor, 0));

	Color = AccumulatedColor / ubo.currentSamplesCount;

	imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(Color, 0));
}
