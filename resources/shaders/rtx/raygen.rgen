#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_GOOGLE_include_directive : require


#define DIFFUSE_TYPE 1
#define SPECULAR_TYPE 2


#include "../Common/random.glsl"
#include "../Common/raypayload.glsl"
#include "../Common/ubo.glsl"
#include "../Common/Tonemapping.glsl"
layout(binding = 0, set = 0) uniform accelerationStructureEXT topLevelAS;
layout(binding = 1, set = 0, rgba8) uniform image2D outputImage;
layout(binding = 2, set = 0, rgba32f) uniform image2D accumulationImage;
layout(binding = 3, set = 0) uniform UniformData { Ubo ubo; };
layout(binding = 6, set = 0) uniform samplerCube IrradianceMap;
layout(binding = 7, set = 0) uniform samplerCube Cubemap;

#include "../Common/SceneUBO.glsl"
layout (set=0, binding = 8) uniform UBO 
{
    sceneUbo Data;
} SceneUbo;

layout(location = 0) rayPayloadEXT rayPayload RayPayload;
layout(location = 1) rayPayloadEXT rayPayload ShadowPayload;

#include "BRDF.glsl"
#include "../Common/Defines.glsl"


struct Light {
	vec3 position;
	uint type;
	vec3 intensity;
	uint pad;
};
#define FLT_MAX 3.402823466e+38F
// Samples a random light from the pool of all lights using simplest uniform distirbution

// Samples a random light from the pool of all lights using RIS (Resampled Importance Sampling)
// bool sampleLightRIS(inout uint State, vec3 hitPosition, vec3 surfaceNormal, inout Light selectedSample, inout float lightSampleWeight) 
// {
// 	float candidateWeight = 1;	

// 	vec3	lightVector = SceneUbo.Data.LightDirection;
// 	float lightDistance = FLT_MAX;

// 	// Ignore backfacing light
// 	vec3 L = normalize(lightVector);
// 	if (dot(surfaceNormal, L) < 0.00001f) return false;

// 	float candidatePdfG = Luminance(SceneUbo.Data.BackgroundColor * SceneUbo.Data.BackgroundIntensity);
// 	const float candidateRISWeight = candidatePdfG * candidateWeight;

// 	totalWeights += candidateRISWeight;
// 	if (rand(rngState) < (candidateRISWeight / totalWeights)) {
// 		selectedSample = candidate;
// 		samplePdfG = candidatePdfG;
// 	}



// 	if (totalWeights == 0.0f) {
// 		return false;
// 	} else {
// 		lightSampleWeight = (totalWeights / float(RIS_CANDIDATES_LIGHTS)) / samplePdfG;
// 		return true;
// 	}
// }

void main() 
{
	bool debug=false;
	if(!debug)
	{

		if(ubo.ShouldAccumulate>0)
		{
			RayPayload.RandomState = uint(uint(gl_LaunchIDEXT.x) * uint(1973) + uint(gl_LaunchIDEXT.y) * uint(9277) + uint(ubo.currentSamplesCount) * uint(26699)) | uint(1); 
			RayPayload.Depth=0;
			vec3 SamplesColor = vec3(0.0);
			
			if(ubo.currentSamplesCount < ubo.MaxSamples)
			{
				for(uint i=0; i<ubo.samplesPerFrame; i++)
				{
					vec2 jitter = vec2(RandomUnilateral(RayPayload.RandomState), RandomUnilateral(RayPayload.RandomState)) - 0.5;
					vec4 Origin = SceneUbo.Data.InvView * vec4(0.0, 0.0, 0.0, 1.0);
					vec4 Target = SceneUbo.Data.InvProjection * vec4((vec2(gl_LaunchIDEXT.xy) + jitter) / gl_LaunchSizeEXT.xy * 2.0 - 1.0, 0.0, 1.0);
					vec4 Direction = SceneUbo.Data.InvView * vec4(normalize(Target.xyz), 0.0);
					
					vec3 Attenuation = vec3(1.0);
					vec3 Radiance = vec3(0);
					float alpha = 1.0;
					

					for(int j=0; j<ubo.rayBounces; j++)
					{
						traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT, 0xff, 0, 0, 0, Origin.xyz, 0.001, Direction.xyz, 10000.0, 0);
						
						//Sky
						{
							if(RayPayload.Distance < 0)
							{
								if(SceneUbo.Data.BackgroundType ==BACKGROUND_TYPE_CUBEMAP)
								{
									vec3 SkyDirection = Direction.xyz;
									SkyDirection.y *=-1;
									Radiance += Attenuation * SceneUbo.Data.BackgroundIntensity * texture(IrradianceMap, SkyDirection).rgb;
								}
								else if(SceneUbo.Data.BackgroundType ==BACKGROUND_TYPE_COLOR)
								{
									Radiance += Attenuation * SceneUbo.Data.BackgroundIntensity * SceneUbo.Data.BackgroundColor;
								}
								break;
							}
						}
						
						vec3 V = -Direction.xyz;
		            	if (dot(RayPayload.Normal, V) < 0.0f) RayPayload.Normal = -RayPayload.Normal;
                    
						Radiance += Attenuation * RayPayload.Emission;

						//Sample lights
						if(SceneUbo.Data.BackgroundType ==BACKGROUND_TYPE_DIRLIGHT)
						{
							// Prepare data needed to evaluate the light
							vec3 LightDir= normalize(-SceneUbo.Data.LightDirection);;
							vec3 LightTangent   = normalize(cross(LightDir, vec3(0.0f, 1.0f, 0.0f)));
							vec3 LightBitangent = normalize(cross(LightTangent, LightDir));
							float Random1 = RandomUnilateral(RayPayload.RandomState);
							float Random2 = RandomUnilateral(RayPayload.RandomState);

							float PointRadius = SceneUbo.Data.LightRadius * Random1;
							float PointAngle  = Random2 * 2.0f * PI;
							vec2  DiskPoint   = vec2(PointRadius * cos(PointAngle), PointRadius * sin(PointAngle));    
							vec3 L = normalize(LightDir + DiskPoint.x * LightTangent + DiskPoint.y * LightBitangent);

							vec4 shadowRayOrigin = Origin + RayPayload.Distance * Direction;
							traceRayEXT(topLevelAS, gl_RayFlagsTerminateOnFirstHitEXT, 0xff, 0, 0, 0, shadowRayOrigin.xyz, 0.001, L, FLT_MAX, 1);
							if(ShadowPayload.Distance == -1)
							{
								Radiance += Attenuation * EvalCombinedBRDF(RayPayload.Normal, L, V, RayPayload.Color, RayPayload.Metallic) * SceneUbo.Data.BackgroundIntensity * SceneUbo.Data.BackgroundColor;
								// Radiance += Attenuation * SceneUbo.Data.BackgroundColor * SceneUbo.Data.BackgroundIntensity;
							}
						}


						if(j == ubo.rayBounces-1) break;
						
						// Russian roulette
						{
							if (j >= 3)
							{
								float q = min(max(Attenuation.x, max(Attenuation.y, Attenuation.z)) + 0.001, 0.95);
								if (RandomUnilateral(RayPayload.RandomState) > q)
									break;
								Attenuation /= q;
							}
						}
						

						//Eval brdf
						{
							int brdfType = DIFFUSE_TYPE;
							if (RayPayload.Metallic == 1.0f && RayPayload.Roughness == 0.0f) {
								brdfType = SPECULAR_TYPE;
							} else {
								float brdfProbability = GetBRDFProbability(RayPayload, V, RayPayload.Normal);

								if (RandomUnilateral(RayPayload.RandomState) < brdfProbability) {
									brdfType = SPECULAR_TYPE;
									Attenuation /= brdfProbability;
								} else {
									brdfType = DIFFUSE_TYPE;
									Attenuation /= (1.0f - brdfProbability);
								}
							}

							vec3 brdfWeight;
							vec2 Xi = vec2(RandomUnilateral(RayPayload.RandomState),RandomUnilateral(RayPayload.RandomState));
							vec3 ScatterDir = vec3(0);

							if(!SampleIndirectCombinedBRDF(Xi, RayPayload.Normal, RayPayload.Normal, V, RayPayload, brdfType, ScatterDir, brdfWeight)) {
								break;
							}

							//the weights already contains color * brdf * cosine term / pdf
							Attenuation *= brdfWeight;						

							Origin = Origin + RayPayload.Distance * Direction;
							Direction = vec4(ScatterDir, 0.0f);
						}					


						
					}

					SamplesColor += Radiance;			
				}
			}

			//Load previous frame
			vec3 LastFrameColor = vec3(0);
			if(ubo.samplesPerFrame != ubo.currentSamplesCount)
			{
				LastFrameColor = imageLoad(accumulationImage, ivec2(gl_LaunchIDEXT.xy)).rgb;
			}

			//Add new color to previous color, and add to accumulation buffer
			vec3 AccumulatedColor = LastFrameColor + SamplesColor;
			imageStore(accumulationImage, ivec2(gl_LaunchIDEXT.xy), vec4(AccumulatedColor, 0));

			//Average, tonemap and set output color
			vec3 Color = AccumulatedColor / ubo.currentSamplesCount;
			Color = toneMap(Color, SceneUbo.Data.Exposure);
			Color = clamp(Color, 0, 1);
			imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(Color, 0));
		}
	}
	else
	{
		
		vec4 Origin = SceneUbo.Data.InvView * vec4(0.0, 0.0, 0.0, 1.0);
		vec4 Target = SceneUbo.Data.InvProjection * vec4((vec2(gl_LaunchIDEXT.xy)) / gl_LaunchSizeEXT.xy * 2.0 - 1.0, 0.0, 1.0);
		vec4 Direction = SceneUbo.Data.InvView * vec4(normalize(Target.xyz), 0.0);
		traceRayEXT(topLevelAS, gl_RayFlagsNoneEXT, 0xff, 0, 0, 0, Origin.xyz, 0.001, Direction.xyz, 10000.0, 0);
		
		vec3 Color = RayPayload.Normal;
		imageStore(outputImage, ivec2(gl_LaunchIDEXT.xy), vec4(Color, 0));
	}
}
